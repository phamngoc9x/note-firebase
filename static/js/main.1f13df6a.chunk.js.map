{"version":3,"sources":["components/firebaseConnect.js","components/Nav.js","components/NoteItem.js","components/NoteList.js","components/NoteForm.js","components/App.js","serviceWorker.js","components/store.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","noteData","ref","Nav","handleAdd","event","preventDefault","_this","props","changeEditStatus","changeAddStatus","_this2","this","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","Component","connect","state","ownProps","dispatch","NoteItem","getDataEdit","value","editForm","getEditItem","role","data-parent","title","deleteItem","aria-labelledby","noteContent","dataEdit","editObject","NoteList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","dataFirebase","map","key","components_NoteItem","on","notes","arrayData","forEach","val","push","setState","aria-multiselectable","NoteForm","handleChange","name","target","defineProperty","addData","content","editOject","console","log","editDataStore","item","addDataStore","printTitle","isAdd","editData","htmlFor","onChange","defaultValue","aria-describedby","placeholder","newItem","getItem","data","once","then","snapshot","App","showForm","editStatus","components_NoteForm","components_Nav","NoteList_NoteList","Boolean","window","location","hostname","match","redux","require","noteInitialState","store","createStore","arguments","length","undefined","action","child","String","remove","objectSpread","update","subscribe","getState","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f13df6a.chunk.js","sourcesContent":["import * as firebase from 'firebase'\nvar config = {\n  apiKey: \"AIzaSyATET4-W-mFgVHiDIVvDPr3o-_J_PxI6Cc\",\n  authDomain: \"notereactvn-12654.firebaseapp.com\",\n  databaseURL: \"https://notereactvn-12654.firebaseio.com\",\n  projectId: \"notereactvn-12654\",\n  storageBucket: \"notereactvn-12654.appspot.com\",\n  messagingSenderId: \"198632317998\"\n};\nfirebase.initializeApp(config);\nexport const noteData =  firebase.database().ref('dataForNote');\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass Nav extends Component {\n  handleAdd = (event) => {\n    event.preventDefault();\n    this.props.changeEditStatus();\n    this.props.changeAddStatus();\n  }\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href=\"/\">Note app</a>\n        <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" />\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"collapsibleNavId\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" onClick = {(event) => this.handleAdd(event) } href=\"/\">Thêm ghi chú</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  }\n}\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeEditStatus: () => {\n      dispatch({type:\"CHANGE_EDIT_STATUS\"})\n    },\n    changeAddStatus: () => {\n      dispatch({type:\"CHANGE_ADD_STATUS\"})\n    },\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nclass NoteItem extends Component {\n  getDataEdit = (value) => {\n    this.props.editForm();\n    this.props.getEditItem(value);\n  \n  }\n  render() {\n    return (\n      <div className=\"card mt-3\">\n        <div className=\"card-header\" role=\"tab\" id=\"note1\">\n          <h5 className=\"mb-0\">\n            <a data-toggle=\"collapse\" data-parent=\"#noteList\" href={'#' + this.props.id} aria-expanded=\"true\" aria-controls={this.props.id}>\n              {this.props.title}\n            </a>\n            <div className =\"btn-group float-right\">\n              <button className=\"btn btn-outline-info\" onClick={() =>this.getDataEdit(this.props.value)}>Sửa</button>\n              <button className=\"btn btn-outline-danger\" onClick={() =>this.props.deleteItem(this.props.id)}>Xoá</button>\n            </div>\n          </h5>\n        <div id={this.props.id} className=\"collapse in\" role=\"tabpanel\" aria-labelledby=\"note1\">\n          <div className=\"card-body\">\n            {this.props.noteContent}\n          </div>\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n   dataEdit: state.dataEdit,\n  }\n}\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    deleteItem: (id) => {\n      dispatch({type:\"DELETE_NOTE\", id})\n    },\n    editForm: () => {\n      dispatch({type:\"CHANGE_EDIT_STATUS\"})\n    },\n    getEditItem: (editObject) => {\n      dispatch({type:\"GET_DATA_EDIT\", editObject})\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteItem);\n","import React, { Component } from 'react'\nimport NoteItem from './NoteItem';\nimport {noteData} from './firebaseConnect';\n\nexport default class NoteList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataFirebase: []\n    }\n  }\n  componentWillMount() {\n    noteData.on('value', (notes) => {\n      var arrayData = []\n      notes.forEach(value => {\n        const key = value.key;\n        const title = value.val().title;\n        const noteContent = value.val().noteContent;\n        arrayData.push({\n          id:key,\n          title: title,\n          noteContent: noteContent\n        })\n      })\n      this.setState({\n        dataFirebase : arrayData\n      })\n    })\n  }\n  getData = () => {\n    if(this.state.dataFirebase) {\n      return this.state.dataFirebase.map((value, key) =>{\n        return <NoteItem value = {value} key = {key} id ={ value.id} title= {value.title} noteContent = {value.noteContent}/>\n      })\n    }\n    \n  }  \n  render() {\n    \n    // const listNote = this.props.data.map((value, key) => {\n    //   return <NoteItem key = {key} title= {value.title} noteContent = {value.noteContent}></NoteItem>;\n    // })\n    return (\n      <div className=\"col\">\n        <div id=\"noteList\" role=\"tablist\" aria-multiselectable=\"true\">\n          {\n            this.getData()\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//inport store from 'store';\nclass NoteForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      noteContent:'',\n      id: ''\n    }\n  }\n  \n  componentWillMount() {\n    if(this.props.editData) {\n      this.setState({\n        title: this.props.editData.title,\n        noteContent: this.props.editData.noteContent,\n        id : this.props.editData.id,\n      })\n    }\n  }\n  handleChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n        \n    this.setState( {\n      [name]: value\n    })\n  }\n\n  addData = (title, content) => {\n    \n    if(this.state.id) {\n      var editOject = {};\n      editOject.id = this.state.id;\n      editOject.title = this.state.title;\n      editOject.noteContent = this.state.noteContent;\n      console.log('dang sua du lieu');\n      this.props.editDataStore(editOject);\n      this.props.editForm();\n    }else{\n      var item = {};\n      item.title = title;\n      item.noteContent = content;\n      this.props.addDataStore(item);\n    }\n    \n  }\n\n  printTitle = ()=>{\n    if(this.props.isAdd) {\n      return <h5 className=\"mt-3\">Thêm mới Ghi Chú</h5>\n    }\n    else {\n      return <h5 className=\"mt-3\">Sửa Ghi Chú</h5>\n    }\n  }\n  render() {\n    return (\n      <div className=\"col-4\">\n        {this.printTitle()}\n        <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Tiêu đề Note</label>\n          <input type=\"text\" onChange = {(event) => this.handleChange(event)} defaultValue = {this.props.editData.title} className=\"form-control\" name=\"title\" id=\"title\" aria-describedby=\"helptitle\" placeholder=\"Tiêu đề Note\" />\n          <small id=\"helptitle\" className=\"form-text text-muted\">Điền tiêu đề vào đây</small>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Nội dung Note</label>\n          <textarea type=\"text\"  onChange = {(event) => this.handleChange(event)} defaultValue = {this.props.editData.noteContent} className=\"form-control\" name=\"noteContent\" id=\"noteContent\" aria-describedby=\"helptitle\" placeholder=\"Nội dung Note\"  />\n          <small id=\"helptitle\" className=\"form-text text-muted\">Điền nội dung vào đây</small>\n        </div>\n        <button type=\"reset\" className=\"btn btn-primary btn-block\" onClick = {() => this.addData( this.state.title, this.state.noteContent)}>Lưu</button>\n        </form>\n      </div>\n\n    )\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    editData : state.editData,\n    isAdd: state.isAdd,\n  }\n}\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    addDataStore: (newItem) => {\n      dispatch({type:\"ADD_DATA\", newItem})\n    },\n    editDataStore: (getItem) => {\n      dispatch({type:\"EDIT\", getItem})\n    },\n    editForm: () => {\n      dispatch({type:\"CHANGE_EDIT_STATUS\"})\n    },\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteForm);\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport {noteData} from './firebaseConnect';\nimport Nav from './Nav';\nimport NoteList from './NoteList';\nimport NoteForm from './NoteForm';\nimport { connect } from 'react-redux';\n\nvar data = noteData.once('value').then(function(snapshot){\n  return snapshot.val();\n});\n\nclass App extends Component {\n  \n  showForm = () => {\n    if(this.props.editStatus) {\n      return <NoteForm/>\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"\">\n        <Nav></Nav>\n        <div className=\"container\">\n          <div className=\"row\">\n            <NoteList data = {data}/>\n            {this.showForm()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    editStatus: state.editStatus,\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { noteData } from './firebaseConnect';\n\nvar redux = require('redux');\n\nconst noteInitialState = {\n  editStatus: false,\n  editData: {},\n  isAdd : false\n}\nconst allReducer = (state = noteInitialState, action) => {\n  switch (action.type) {\n    case 'ADD_DATA':\n      noteData.push(action.newItem);\n      return state\n\n    case 'DELETE_NOTE':\n      noteData.child(String(action.id)).remove();\n      return state\n\n    case 'CHANGE_EDIT_STATUS':\n      return {...state, editStatus: !state.editStatus}\n      \n    case 'CHANGE_ADD_STATUS':\n      return {...state, isAdd: !state.isAdd}\n\n    case 'GET_DATA_EDIT':\n      return {...state, editData: action.editObject}\n\n    case 'EDIT':\n      noteData.child(action.getItem.id).update({\n        title : action.getItem.title,\n        noteContent: action.getItem.noteContent\n      })\n      return {...state, editData:{}}\n\n    default:\n      return state\n  }\n}\nvar store = redux.createStore(allReducer);\nstore.subscribe(function(){\n  console.log(store.getState());\n  \n})\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './components/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}